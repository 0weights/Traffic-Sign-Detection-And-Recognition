{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"PbRTZ5ks24kk","cellView":"form"},"source":["#@title Colab Helper Function { form-width: \"10%\" }\n","!rm -rf OID    # to delete a folder\n","\n","#@title Preventing Colab From Dissconecting\n","#ctrl+shift+i then choose console and paste the\n","#code then hit enter\n","function ClickConnect(){\n","console.log(\"Working\"); \n","document.querySelector(\"colab-toolbar-button#connect\").click() \n","}\n","setInterval(ClickConnect,60000)\n","\n","#move folder to another folder\n","!mv /content/OID /content/darknet/data\n","#move files from folder to another folder\n","!mv /content/darknet/data/OID/Dataset/train/Crab/Label/*.txt /content/darknet/data/OID/Dataset/train/Crab\n","#move yolov3.weight from drive to darknet\n","%cd /content\n","!cp \"/content/drive/My Drive/yolov3.weights\" /content/darknet\n","# move images\n","!cp /mydrive/FullIJCNN2013/* /content/darknet/img\n","import os\n","import shutil\n","%cd /content\n","for name in os.listdir('/content/drive/My Drive/annotation_38'):\n","  for img in os.listdir('/content/darknet/img/'):\n","    if(img.split('.')[0] == name.split('.')[0]):\n","      print(\"success\")\n","      shutil.move(\"/content/drive/My Drive/FullIJCNN2013/\" + img, \"/content/darknet/data/obj\")\n","# to solve my drive space problem\n","!ln -s /content/drive/My\\ Drive/ /mydrive\n","!ls /mydrive"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zIh4smm7PEry","cellView":"form"},"source":["#@title Install YOLO & Darknet (We Don't Need It) { form-width: \"4.5%\" }\n","!git clone https://github.com/AlexeyAB/darknet\n","%cd darknet\n","# change makefile to have GPU and OPENCV enabled\n","%cd darknet\n","!sed -i 's/OPENCV=0/OPENCV=1/' Makefile\n","!sed -i 's/GPU=0/GPU=1/' Makefile\n","!sed -i 's/CUDNN=0/CUDNN=1/' Makefile\n","# verify CUDA\n","!/usr/local/cuda/bin/nvcc --version\n","# make darknet (build)\n","!make"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FBfH0rchLV1w","cellView":"form"},"source":["#@title Mount Drive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oDx-zqBnaJIe","cellView":"form"},"source":["#@title Rename Drive Path\n","!ln -s /content/drive/My\\ Drive/ /mydrive"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qo4APULE6hka","cellView":"form"},"source":["#@title Prepare Inviroment  { form-width: \"10%\" }\n","# !cp -r /mydrive/backup_file_gp/darknet /content/\n","!cp -r /mydrive//YOLO_Last_Approch/darknet /content/"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"epkgnoVUOWrs","cellView":"form"},"source":["#@title Give Permasion Run After Training\n","!chmod 755 darknet\n","%tensorflow_version 2.x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gYEtfU1wcxfv","cellView":"form"},"source":["#@title imshow()\n","def imShow(path):\n","  import cv2\n","  import matplotlib.pyplot as plt\n","  %matplotlib inline\n","  image = cv2.imread(path)\n","  height, width = image.shape[:2]\n","  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)\n","  fig = plt.gcf()\n","  fig.set_size_inches(18, 10)\n","  plt.axis(\"off\")\n","  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))\n","  plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_9BsP81viiTN","cellView":"form"},"source":["#@title Test If YOLO Is Working { form-width: \"20%\" }\n","%cd /mydrive/YOLO_Last_Approch/darknet\n","!./darknet detector test cfg/coco.data cfg/yolov3.cfg yolov3.weights data/dog.jpg\n","def imShow(path):\n","  import cv2\n","  import matplotlib.pyplot as plt\n","  %matplotlib inline\n","  image = cv2.imread(path)\n","  height, width = image.shape[:2]\n","  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)\n","  fig = plt.gcf()\n","  fig.set_size_inches(18, 10)\n","  plt.axis(\"off\")\n","  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))\n","  plt.show()\n","imShow('predictions.jpg')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","id":"ed2Ma8I0CT3L"},"source":["#@title Train The Model Colab{ form-width: \"10%\" }\n","# %%capture\n","%cd /content/darknet\n","# !./darknet detector train data/obj.data cfg/yolov3_custom.cfg darknet53.conv.74 -dont_show -map\n","!./darknet detector train data/obj.data cfg/yolov3_custom.cfg /mydrive/YOLO_Last_Approch/backup/yolov3_custom_last.weights -dont_show -map"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"11QHc0ktPIuD","cellView":"form"},"source":["#@title Train The Model Drive{ form-width: \"10%\" }\n","%%capture\n","%cd /mydrive/YOLO_Last_Approch/darknet\n","!./darknet detector train data/obj.data cfg/yolov3_custom.cfg darknet53.conv.74 -dont_show -map\n","# !./darknet detector train data/obj.data cfg/yolov3_custom.cfg /mydrive/YOLO_Last_Approch/backup/yolov3_custom_last.weights -dont_show -map"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8__R4-uwc07Z","cellView":"form"},"source":["#@title Test The Model drive{ form-width: \"10%\" }\n","%cd /mydrive/YOLO_Last_Approch/darknet\n","!./darknet detector test data/obj.data cfg/yolov3_customm.cfg /mydrive/YOLO_Last_Approch/backup/yolov3_custom_final.weights /mydrive/YOLO_Last_Approch/validationImages/1.jpg -thresh 0.1\n","imShow('predictions.jpg')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MWLTB_xkI3VO","cellView":"form"},"source":["#@title after changeing image.c we have to make the code again\n","!make"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4BIJFOFbF8ni","cellView":"form"},"source":["#@title Commands Below Must Run To Run Yolo On Video Change Path If You See <strong>%cd</strong> { form-width: \"10%\" }\n","#Installing CUDA pre-requisites\n","!wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb\n","!dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb\n","!apt update\n","\n","#Installing CUDA\n","!apt install cuda-8-0 -y\n","\n","# If there is| an issue installing CUDA, \n","# try installing cuda-visual-tools again\n","# Comment the earlier command to install cuda\n","# Uncomment and run the below command\n","\n","#!apt --fix-broken install cuda-visual-tools-8-0 -y\n","import os\n","os.environ['PATH'] += ':/usr/local/cuda/bin'\n","#Installing compilers\n","!apt install gcc-5 g++-5 -y\n","!ln -s /usr/bin/gcc-5 /usr/local/cuda/bin/gcc \n","!ln -s /usr/bin/g++-5 /usr/local/cuda/bin/g++\n","import os\n","os.environ['PATH'] += ':/usr/local/cuda/bin'\n","#Changing the variables to include OpenCV and GPU in the Makefile\n","%cd /mydrive/YOLO_Last_Approch/darknet\n","!sed -i 's/OPENCV=0/OPENCV=1/g' Makefile\n","!sed -i 's/GPU=0/GPU=1/g' Makefile\n","#!sed -i 's/CUDNN=0/CUDNN=1/g' Makefile\n","\n","# And this is how our Makefile looks now\n","# Check if OPENCV = 1 and GPU = 1\n","!cat Makefile\n","# Apparently we need to install this so that OpenCV can work without any issues\n","# when we are making the file\n","!apt-get install libopencv-dev\n","#Running make!\n","!make"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N-T2pfMpCthr","cellView":"form"},"source":["#@title Test On Video { form-width: \"10%\" }\n","\n","# %%capture\n","%cd /mydrive/YOLO_Last_Approch/darknet\n","# i don't know why it works on diffrent cfg files\n","!./darknet detector demo data/obj.data cfg/yolov3_customm.cfg /mydrive/YOLO_Last_Approch/backup/yolov3_custom_final.weights -dont_show /mydrive/YOLO_Last_Approch/video/2.mp4 -i 0 -out_filename res.avi\n","from google.colab import files\n","files.download('/mydrive/YOLO_Last_Approch/darknet/res.avi')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eoQnU2EcGiPq","cellView":"form"},"source":["#@title Save The Video { form-width: \"10%\" }\n","\n","# Python program to save a  \n","# video using OpenCV \n","  \n","   \n","import cv2 \n","  \n","   \n","# Create an object to read  \n","# from camera \n","video = cv2.VideoCapture('/content/drive/My Drive/YOLO_Last_Approch/video/test_video.mp4') \n","   \n","# We need to check if camera \n","# is opened previously or not \n","if (video.isOpened() == False):  \n","    print(\"Error reading video file\") \n","  \n","# We need to set resolutions. \n","# so, convert them from float to integer. \n","frame_width = int(video.get(3)) \n","frame_height = int(video.get(4)) \n","FBS = int(video.get(5))\n","size = (frame_width, frame_height) \n","   \n","# Below VideoWriter object will create \n","# a frame of above defined The output  \n","# is stored in 'filename.avi' file. \n","result = cv2.VideoWriter('filename.mp4',  \n","                         cv2.VideoWriter_fourcc(*'MP4V'), \n","                         FBS, size) \n","    \n","while(True): \n","    ret, frame = video.read() \n","  \n","    if ret == True:  \n","  \n","        # Write the frame into the \n","        # file 'filename.avi' \n","        flipped = cv2.flip(frame, flipCode=-1)\n","        result.write(flipped) \n","  \n","        # Display the frame \n","        # saved in the file \n","        # cv2.imshow('Frame', frame) \n","  \n","        # Press S on keyboard  \n","        # to stop the process \n","        if cv2.waitKey(1) & 0xFF == ord('s'): \n","            break\n","  \n","    # Break the loop \n","    else: \n","        break\n","  \n","# When everything done, release  \n","# the video capture and video  \n","# write objects \n","video.release() \n","result.release() \n","    \n","# Closes all the frames \n","cv2.destroyAllWindows() \n","   \n","print(\"The video was successfully saved\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YEk-qQE_K-Tp"},"source":[],"execution_count":null,"outputs":[]}]}