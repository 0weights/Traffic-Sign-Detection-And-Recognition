{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Connection between Classifier and Detector","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"gzEKEy9IJ4no","colab_type":"code","cellView":"form","colab":{}},"source":["#@title Using openCV 4.4.0 don't run the speed test will only increased by 200%{ form-width: \"10%\" }\n","%cd /content\n","!git clone https://github.com/opencv/opencv\n","!git clone https://github.com/opencv/opencv_contrib\n","!mkdir /content/build\n","%cd /content/build\n","\n","!cmake -DOPENCV_EXTRA_MODULES_PATH=/content/opencv_contrib/modules -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_EXAMPLES=OFF -DWITH_OPENEXR=OFF -DWITH_CUDA=ON -DWITH_CUBLAS=ON -DWITH_CUDNN=ON -DOPENCV_DNN_CUDA=ON /content/opencv\n","\n","!make -j8 install\n","\n","!mkdir  \"/content/drive/My Drive/GTSRB_new/cv2_cuda\"\n","!cp  /content/build/lib/python3/cv2.cpython-36m-x86_64-linux-gnu.so   \"/content/drive/My Drive/GTSRB_new/cv2_cuda\"\n","\n","import cv2\n","cv2.__version__"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MldHkYI1lyrs","colab_type":"code","cellView":"form","colab":{}},"source":["#@title Getting Data { form-width: \"10%\" }\n","from google.colab import drive\n","drive.mount('/content/drive')\n","!cp '/content/drive/My Drive/YOLO_Last_Approch/backup/yolov3_custom_final.weights' '/content/'\n","!cp '/content/drive/My Drive/YOLO_Last_Approch/darknet/cfg/yolov3_customm.cfg' '/content/'\n","!cp '/content/drive/My Drive/YOLO_Last_Approch/darknet/data/obj.names' '/content/'\n","!cp '/content/drive/My Drive/GTSRB_new/videos/3.mp4' '/content/'\n","!cp '/content/drive/My Drive/GTSRB_new/videos/2.mp4' '/content/'\n","!cp '/content/drive/My Drive/YOLO_Last_Approch/video/1.mp4' '/content/'\n","!cp '/content/drive/My Drive/YOLO_Last_Approch/video/2o.mp4' '/content/'\n","!cp '/content/drive/My Drive/GTSRB_new/99.2637/6.8.M.InceptionWithDataAaugmentationEpoch200.h5' /content/"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ppyhim-SkeK2","colab_type":"code","cellView":"form","colab":{}},"source":["#@title Libraries { form-width: \"10%\" }\n","from skimage import morphology, filters, io, transform, color, exposure\n","\n","from keras.initializers import glorot_uniform\n","from keras.utils import CustomObjectScope\n","from keras.models import load_model\n","\n","from google.colab.patches import cv2_imshow\n","from imutils.video import FPS\n","from termcolor import colored\n","from tqdm import tqdm\n","from PIL import Image\n","import imutils\n","\n","import skimage as sk\n","import numpy as np\n","import time\n","import uuid\n","import cv2\n","import os"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"crT5gfVplTkk","colab_type":"code","cellView":"form","colab":{}},"source":["#@title Determin Label { form-width: \"10%\" }\n","def get_sign_description(label):\n","    signs = {'0': 'Maximum Speed Limit 20 MPH',\n","             '1': 'Maximum Speed Limit 30 MPH',\n","             '2': 'Maximum Speed Limit 50 MPH',\n","             '3': 'Maximum Speed Limit 60 MPH',\n","             '4': 'Maximum Speed Limit 70 MPH',\n","             '5': 'Maximum Speed Limit 80 MPH',\n","             '6': 'End Of 80 MPH Limit Speed',\n","             '7': 'Maximum Speed Limit 100 MPH',\n","             '8': 'Maximum Speed Limit 120 MPH',\n","             '9': 'Overtaking not allowed',\n","             '10': 'Overtaking is prohibited only \\n for Goods vehicles having a permissible \\n Maximum weight '\n","                   'exceeding 3.5 tons',\n","             '11': 'Crossroad ahead \\n side roads to right and left',\n","             '12': 'Priority road ahead',\n","             '13': 'Give way to all traffic',\n","             '14': 'Stop and give way to all traffic',\n","             '15': 'Entry not allowed / forbidden',\n","             '16': 'Lorries - Trucks forbidden',\n","             '17': 'No entry (one-way traffic)',\n","             '18': 'Cars not allowed - prohibited',\n","             '19': 'Road ahead curves to the left side',\n","             '20': 'Road bends to the right',\n","             '21': 'Double curve ahead, \\nto the left then to the right',\n","             '22': 'Poor road surface ahead',\n","             '23': 'Slippery road surface ahead',\n","             '24': 'Road gets narrow on the right side',\n","             '25': 'Roadworks ahead warning',\n","             '26': 'Traffic light ahead',\n","             '27': 'Warning for pedestrians',\n","             '28': 'Warning for children and minors',\n","             '29': 'Warning for bikes and cyclists',\n","             '30': 'snow or ice smoothness',\n","             '31': 'Deer crossing in area - road',\n","             '32': 'End of all speed and passing limits',\n","             '33': 'Turning right compulsory',\n","             '34': 'Left turn mandatory',\n","             '35': 'Ahead Only',\n","             '36': 'Driving straight ahead \\n or \\n turning right mandatory',\n","             '37': 'Driving straight ahead \\n or \\n turning left mandatory',\n","             '38': 'Pass on right only',\n","             '39': 'Passing left compulsory',\n","             '40': 'Direction of traffic on roundabout',\n","             '41': 'End of the overtaking prohibition',\n","             '42': 'End of the overtaking prohibition for trucks'\n","             }\n","    for i in signs:\n","        if label == int(i):\n","            return signs[i]\n","\n","def get_sign_shortDescription(label):\n","    signs = {'0': 'Maximum Speed 20',\n","             '1': 'Maximum Speed 30',\n","             '2': 'Maximum Speed 50',\n","             '3': 'Maximum Speed 60',\n","             '4': 'Maximum Speed 70',\n","             '5': 'Maximum Speed 80',\n","             '6': 'End Of 80 MPH Limit Speed',\n","             '7': 'Maximum Speed 100',\n","             '8': 'Maximum Speed 120',\n","             '9': 'Overtaking not allowed',\n","             '10': 'Overtaking is prohibited',\n","             '11': 'Crossroad ahead',\n","             '12': 'Priority road ahead',\n","             '13': 'Give way to all traffic',\n","             '14': 'Stop and give way to all traffic',\n","             '15': 'Entry forbidden',\n","             '16': 'Lorries forbidden',\n","             '17': 'No entry',\n","             '18': 'Cars not allowed',\n","             '19': 'Road ahead',\n","             '20': 'Road bends',\n","             '21': 'Double curve ahead',\n","             '22': 'Poor road surface ahead',\n","             '23': 'Slippery road surface ahead',\n","             '24': 'Road gets narrow',\n","             '25': 'Roadworks ahead warning',\n","             '26': 'Traffic light ahead',\n","             '27': 'Warning for pedestrians',\n","             '28': 'Warning for children',\n","             '29': 'Warning for bikes',\n","             '30': 'snow or ice smoothness',\n","             '31': 'Deer crossing',\n","             '32': 'End of all speed',\n","             '33': 'Turning right compulsory',\n","             '34': 'Left turn mandatory',\n","             '35': 'Ahead Only',\n","             '36': 'Driving straight ahead',\n","             '37': 'Driving straight ahead',\n","             '38': 'Pass on right only',\n","             '39': 'Passing left compulsory',\n","             '40': 'Direction of traffic on roundabout',\n","             '41': 'End of the overtaking ',\n","             '42': 'End of the overtaking for trucks'\n","             }\n","    for i in signs:\n","        if label == int(i):\n","            return signs[i]\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dVArdbxCQGYL","colab_type":"code","cellView":"form","colab":{}},"source":["#@title Hyperparametars { form-width: \"10%\" }\n","modelh5 = \"/content/6.8.M.InceptionWithDataAaugmentationEpoch200.h5\"\n","weightsYOLO = \"/content/yolov3_custom_final.weights\"\n","CFG = \"/content/yolov3_customm.cfg\"\n","names_path = \"/content/obj.names\"\n","test_video = \"/content/1.mp4\"\n","# test_video = '/content/2.mp4' \n","# test_video = '/content/2o.mp4'\n","# test_video = '/content/3.mp4' \n","IMG_SIZE = 48\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LIFm1riflFxs","colab_type":"code","cellView":"form","colab":{}},"source":["#@title Prepare Classifire { form-width: \"10%\" }\n","def histogram_equalize(image):\n","    kernel = sk.morphology.disk(30)\n","    img_local = sk.filters.rank.equalize(image, selem=kernel)\n","    return img_local\n","\n","def process(img):\n","  min_side = min(img.shape[:-1])\n","  centre = img.shape[0]//2, img.shape[1]//2\n","  img = img[centre[0]-min_side//2:centre[0]+min_side//2,\n","            centre[1]-min_side//2:centre[1]+min_side//2,:]\n","  img = transform.resize(img, (IMG_SIZE, IMG_SIZE))\n","  return img\n","\n","\n","with CustomObjectScope({'GlorotUniform': glorot_uniform()}):\n","    model = load_model(modelh5)\n","print(colored(\"Loaded Model From Disk\", 'green'))\n","\n","\n","def predict(test_img):\n","    test_img_data = process(test_img)\n","    x_test_3d = np.expand_dims(test_img_data, axis=0)\n","    # x_test_4d = np.expand_dims(x_test_3d, axis=3)\n","    prediction = model.predict(x_test_3d)\n","    class_name = np.argmax(prediction)\n","    return class_name"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"z46Uj3bvlaKp","colab_type":"code","cellView":"form","colab":{}},"source":["#@title Prepare YOLO  { form-width: \"10%\" }\n","net = cv2.dnn.readNet(weightsYOLO, CFG)\n","classes = []\n","with open(names_path, \"r\") as f:\n","    classes = [line.strip() for line in f.readlines()]\n","layer_names = net.getLayerNames()\n","output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]\n","colors = np.random.uniform(0, 255, size=(len(classes), 3))\n","\n","# Loading image\n","cap = cv2.VideoCapture(test_video)\n","\n","# Creating a new video this video will be the output\n","frame_width = int(cap.get(3)) \n","frame_height = int(cap.get(4)) + int(cap.get(4))//2\n","FBS = int(cap.get(5))\n","size = (frame_width, frame_height) \n","result = cv2.VideoWriter('outVideo.mp4',  cv2.VideoWriter_fourcc(*'MP4V'), FBS, size) \n","font = cv2.FONT_HERSHEY_SIMPLEX\n","frame_id = 0\n","while cap.isOpened():\n","\n","    success, frame = cap.read()\n","    if success == False:\n","        break\n","    # pbar.update(1)\n","    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)\n","    net.setInput(blob)\n","    outs = net.forward(output_layers)\n","    frame_id += 1\n","    height, width, channels = frame.shape\n","    # Detecting objects\n","    class_ids = []\n","    confidences = []\n","    boxes = []\n","    for out in outs:\n","        for detection in out:\n","            scores = detection[5:]\n","            class_id = np.argmax(scores)\n","            confidence = scores[class_id]\n","            if confidence > 0.85:\n","                # Object detected\n","                center_x = int(detection[0] * width)\n","                center_y = int(detection[1] * height)\n","                w = int(detection[2] * width)\n","                h = int(detection[3] * height)\n","\n","                # Rectangle coordinates\n","                x = int(center_x - w / 2)\n","                y = int(center_y - h / 2)\n","\n","                boxes.append([x, y, w, h])\n","                confidences.append(float(confidence))\n","                class_ids.append(class_id)\n","\n","    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.8, 0.3)\n","    text_labels = []\n","    enlarged_frame = np.zeros(shape=(frame.shape[0]+int(cap.get(4))//2, frame.shape[1], 3))\n","    enlarged_frame = np.uint8(enlarged_frame)\n","    for i in range(len(boxes)):\n","        if i in indexes:\n","            x, y, w, h = boxes[i]\n","            confidence = confidences[i]\n","            color = colors[class_ids[i]]\n","\n","            # start preprocesing sign\n","            width_per = w * 0.25\n","            height_per = h * 0.25\n","            crop_img = frame[y - int(height_per / 2):y + h + int(height_per / 2),\n","                                  x - int(width_per / 2):x + w + int(width_per / 2)]\n","\n","            sign_class_id = predict(crop_img)\n","            description = get_sign_description(sign_class_id)\n","            # end preprocesing sing\n","            cv2.rectangle(frame, (x, y), (x + w, y + h), (209, 80, 0), 2)\n","            cv2.putText(frame,str(get_sign_shortDescription(sign_class_id)),(x - 50, y - 4), font, 0.3, (209, 80, 0), 1)\n","\n","            text_labels.append(description)\n","\n","    enlarged_frame[0:frame.shape[0], :, :] = frame[:,:,:]\n","    enlarged_frame[frame.shape[0] + 1:, :, :] = 0 \n","    padding = 0\n","\n","    for label in text_labels:\n","      cv2.putText(enlarged_frame,label ,(40, frame.shape[0] + 30 + padding), font, 0.4, (255, 255, 255), 1)\n","      padding += 50\n","    result.write(enlarged_frame) \n","\n","result.release() \n","cap.release()\n","cv2.destroyAllWindows()"],"execution_count":null,"outputs":[]}]}